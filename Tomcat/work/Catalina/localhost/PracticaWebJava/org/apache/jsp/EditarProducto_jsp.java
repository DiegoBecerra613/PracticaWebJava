/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-28 18:45:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Map;
import java.util.HashMap;
import logica.proveedor;
import logica.productoproveedor;
import logica.tipoproducto;
import java.util.List;
import logica.Controladora;
import logica.producto;

public final class EditarProducto_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("logica.producto");
    _jspx_imports_classes.add("logica.Controladora");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("logica.proveedor");
    _jspx_imports_classes.add("logica.productoproveedor");
    _jspx_imports_classes.add("logica.tipoproducto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>");
      out.print( (request.getParameter("accion") != null && request.getParameter("accion").equals("agregar")) ? "Agregar Producto" : "Editar Producto");
      out.write("</title>\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"src/css/style.css\">\n");
      out.write("        <style>\n");
      out.write("            .form-container {\n");
      out.write("                display: grid;\n");
      out.write("                grid-template-columns: repeat(2, 1fr);\n");
      out.write("                gap: 10px;\n");
      out.write("                margin: auto;\n");
      out.write("                margin-bottom: 20px;\n");
      out.write("            }\n");
      out.write("            .form-container p {\n");
      out.write("                margin: 0;\n");
      out.write("                display: flex;\n");
      out.write("                align-items: center;\n");
      out.write("            }\n");
      out.write("            .form-container label {\n");
      out.write("                width: 150px; /* Ajusta este ancho según sea necesario */\n");
      out.write("                display: inline-block;\n");
      out.write("            }\n");
      out.write("            .form-container input, .form-container select {\n");
      out.write("                width: 100%;\n");
      out.write("                margin-right: 20px;\n");
      out.write("                padding: 5px;\n");
      out.write("                font-size: 16px;\n");
      out.write("            }\n");
      out.write("            .form-container button {\n");
      out.write("                grid-column: span 2; /* El botón ocupa ambas columnas */\n");
      out.write("            }\n");
      out.write("            .action-buttons {\n");
      out.write("                text-align: center;\n");
      out.write("            }\n");
      out.write("            .action-buttons button {\n");
      out.write("                margin: 0 5px;\n");
      out.write("            }\n");
      out.write("            .button-container {\n");
      out.write("                text-align: center;\n");
      out.write("                margin-top: 20px;\n");
      out.write("            }\n");
      out.write("            .button-container button {\n");
      out.write("                padding: 10px 20px;\n");
      out.write("                font-size: 16px;\n");
      out.write("                margin: 0 10px;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("        <script>\n");
      out.write("            // Función para abrir el modal de agregar proveedor\n");
      out.write("            function openAddModal() {\n");
      out.write("                document.getElementById(\"addModal\").style.display = \"block\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Función para abrir el modal de editar proveedor\n");
      out.write("            function openEditModal(proveedor) {\n");
      out.write("                document.getElementById(\"editModal\").style.display = \"block\";\n");
      out.write("                document.getElementById(\"editIdProdProvee\").value = proveedor.id;\n");
      out.write("                document.getElementById(\"claveProducto\").value = proveedor.claveProducto;\n");
      out.write("                document.getElementById(\"costo\").value = proveedor.costo;\n");
      out.write("\n");
      out.write("                const select = document.getElementById(\"idProveedor2\");\n");
      out.write("                const proveedorId = proveedor.idProveedor.toString();\n");
      out.write("                select.value = proveedorId;\n");
      out.write("\n");
      out.write("                select.dispatchEvent(new Event('change')); // Forzar el evento de cambio\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Función para cerrar el modal\n");
      out.write("            function closeModal(modalId) {\n");
      out.write("                document.getElementById(modalId).style.display = \"none\";\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <h1>");
      out.print( (request.getParameter("accion") != null && request.getParameter("accion").equals("agregar")) ? "Agregar Producto" : "Editar Producto");
      out.write("</h1>\n");
      out.write("        ");

            Controladora control = new Controladora();
            List<tipoproducto> listaTipos = control.traerTipos();
            List<proveedor> listaProveedores = control.traerProveedores();

            // Crear un mapa de IDs de proveedores a nombres de proveedores
            Map<Integer, String> proveedorMap = new HashMap<>();
            for (proveedor p : listaProveedores) {
                proveedorMap.put(p.getIdProveedor(), p.getNombre());
            }

            producto prod = (producto) request.getSession().getAttribute("prodEditar");
            String accion = request.getParameter("accion");
            String formAction = "SvEditar";
            String buttonText = "Guardar";

            if (accion != null && accion.equals("agregar")) {
                prod = new producto(); // Crear un nuevo objeto producto vacío para agregar
                formAction = "SvProductos"; // Cambia el action del formulario a SvAgregar
                buttonText = "Agregar";
            }
        
      out.write("\n");
      out.write("\n");
      out.write("        <form action=\"");
      out.print( formAction);
      out.write("\" method=\"POST\">\n");
      out.write("            <div class=\"form-container\">\n");
      out.write("                <p><label>Clave Producto: </label> <input type=\"text\" name=\"claveProducto\" value=\"");
      out.print( prod.getClaveProducto() != null ? prod.getClaveProducto() : "");
      out.write("\" required></p>\n");
      out.write("                <p><label>Nombre: </label> <input type=\"text\" name=\"nombre\" value=\"");
      out.print( prod.getNombre() != null ? prod.getNombre() : "");
      out.write("\"required></p>\n");
      out.write("                <p><label>Precio: </label> <input type=\"text\" name=\"precio\" value=\"");
      out.print( prod.getPrecio() != null ? prod.getPrecio() : "");
      out.write("\" required></p>\n");
      out.write("                <p><label>Tipo Producto: </label>\n");
      out.write("                    <select id=\"tipoProducto\" name=\"tipoProducto\">\n");
      out.write("                        ");

                            String selectedTipoId = String.valueOf(prod.getTipoProducto());
                            for (tipoproducto tipo : listaTipos) {
                                String tipoIdStr = String.valueOf(tipo.getId());
                                boolean isSelected = tipoIdStr.equals(selectedTipoId);
                        
      out.write("\n");
      out.write("                        <option value=\"");
      out.print( tipoIdStr);
      out.write('"');
      out.write(' ');
      out.print( isSelected ? "selected" : "");
      out.write('>');
      out.print( tipo.getNombre());
      out.write("</option>\n");
      out.write("                        ");

                            }
                        
      out.write("\n");
      out.write("                    </select>\n");
      out.write("                </p>\n");
      out.write("                <button type=\"submit\">");
      out.print( buttonText);
      out.write("</button>\n");
      out.write("            </div>\n");
      out.write("        </form>\n");
      out.write("\n");
      out.write("        ");
 if (accion == null || !accion.equals("agregar")) { 
      out.write("\n");
      out.write("        <table>\n");
      out.write("            <thead>\n");
      out.write("                <tr>\n");
      out.write("                    <th>Editar</th>\n");
      out.write("                    <th>Proveedor</th>\n");
      out.write("                    <th>Clave Producto</th>\n");
      out.write("                    <th>Costo</th>\n");
      out.write("                    <th>Eliminar</th>\n");
      out.write("                </tr>\n");
      out.write("            </thead>\n");
      out.write("            <tbody>\n");
      out.write("                ");

                    List<productoproveedor> listaProductosProveedores = (List) request.getSession().getAttribute("listaProductosProveedores");
                    int cont = 1;
                    if (listaProductosProveedores != null && !listaProductosProveedores.isEmpty()) {
                        for (productoproveedor prodprovee : listaProductosProveedores) {
                            String proveedorNombre = proveedorMap.get(prodprovee.getIdProveedor()); // Obtener el nombre del proveedor

      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td class=\"action-buttons\">\n");
      out.write("                        <button onclick=\"openEditModal({\n");
      out.write("                                    id: '");
      out.print( prodprovee.getIdProductoProveedor());
      out.write("',\n");
      out.write("                                    idProveedor: '");
      out.print( prodprovee.getIdProveedor());
      out.write("',\n");
      out.write("                                    costo: '");
      out.print( prodprovee.getCosto());
      out.write("',\n");
      out.write("                                    claveProducto: '");
      out.print( prodprovee.getClaveProductoProveedor());
      out.write("'\n");
      out.write("                                            // Puedes añadir más datos aquí si es necesario\n");
      out.write("                                })\">Editar</button>\n");
      out.write("                    </td>\n");
      out.write("                    <td>");
      out.print( proveedorNombre != null ? proveedorNombre : "Desconocido");
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( prodprovee.getClaveProductoProveedor());
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( prodprovee.getCosto());
      out.write("</td>\n");
      out.write("                    <td class=\"action-buttons\">\n");
      out.write("                        <form action=\"SvEliminarProductoProveedor\" method=\"POST\" style=\"display:inline;\">\n");
      out.write("                            <input type=\"hidden\" name=\"IdProductoProovedor\" value=\"");
      out.print( prodprovee.getIdProductoProveedor());
      out.write("\">\n");
      out.write("                            <button type=\"submit\" class=\"delete\">Eliminar</button>\n");
      out.write("                        </form>\n");
      out.write("                    </td>\n");
      out.write("                </tr>\n");
      out.write("                ");

                    }
                } else {
                
      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td colspan=\"5\">No se encontraron productos.</td>\n");
      out.write("                </tr>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </tbody>\n");
      out.write("        </table>\n");
      out.write("        <div class=\"button-container\">\n");
      out.write("            <!-- Botón para abrir el modal de agregar proveedor -->\n");
      out.write("            <button onclick=\"openAddModal()\" class=\"button-action\">Agregar proveedor</button>\n");
      out.write("        </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("        <div class=\"button-container\">\n");
      out.write("            <!-- Botón para regresar a index.jsp -->\n");
      out.write("            <form action=\"index.jsp\" method=\"GET\" style=\"display:inline;\">\n");
      out.write("                <button type=\"submit\">Ir hacia atrás</button>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- Modal para agregar proveedor -->\n");
      out.write("        <div id=\"addModal\" class=\"modal\">\n");
      out.write("            <div class=\"modal-content\">\n");
      out.write("                <span class=\"close\" onclick=\"closeModal('addModal')\">&times;</span>\n");
      out.write("                <h2>Agregar Proveedor</h2>\n");
      out.write("                <form action=\"SvProductosProveedor\" method=\"POST\" class=\"form-container\">\n");
      out.write("                    <p><label>Proveedor: </label> \n");
      out.write("                        <select id=\"idProveedor\" name=\"idProveedor\">\n");
      out.write("                            ");

                                for (proveedor provee : listaProveedores) {
                            
      out.write("\n");
      out.write("                            <option value=\"");
      out.print( provee.getIdProveedor());
      out.write('"');
      out.write('>');
      out.print( provee.getNombre());
      out.write("</option>\n");
      out.write("                            ");

                                }
                            
      out.write("\n");
      out.write("                        </select>\n");
      out.write("                    </p>\n");
      out.write("                    <p><label>Clave Producto: </label> <input type=\"text\" name=\"claveProducto\" required></p>\n");
      out.write("                    <p><label>Costo: </label> <input type=\"text\" name=\"costo\" required></p>\n");
      out.write("                    <button type=\"submit\">Agregar</button>\n");
      out.write("                </form>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- Modal para editar proveedor -->\n");
      out.write("        <div id=\"editModal\" class=\"modal\">\n");
      out.write("            <div class=\"modal-content\">\n");
      out.write("                <span class=\"close\" onclick=\"closeModal('editModal')\">&times;</span>\n");
      out.write("                <h2>Editar Proveedor</h2>\n");
      out.write("                <form action=\"SvProductosProveedorEditar\" method=\"POST\" class=\"form-container\">\n");
      out.write("                    <input type=\"hidden\" id=\"editIdProdProvee\" name=\"editIdProdProvee\">\n");
      out.write("                    <p><label>Proveedor: </label> \n");
      out.write("                        <select id=\"idProveedor2\" name=\"idProveedor\">\n");
      out.write("                            ");

                                for (proveedor provee : listaProveedores) {
                            
      out.write("\n");
      out.write("                            <option value=\"");
      out.print( provee.getIdProveedor());
      out.write('"');
      out.write('>');
      out.print( provee.getNombre());
      out.write("</option>\n");
      out.write("                            ");

                                }
                            
      out.write("\n");
      out.write("                        </select>\n");
      out.write("                    </p>\n");
      out.write("                    <p><label>Clave Producto: </label> <input type=\"text\" name=\"claveProducto\" id=\"claveProducto\" required></p>\n");
      out.write("                    <p><label>Costo: </label> <input type=\"text\" name=\"costo\" id=\"costo\" required></p>\n");
      out.write("                    <button type=\"submit\">Editar</button>\n");
      out.write("                </form>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
